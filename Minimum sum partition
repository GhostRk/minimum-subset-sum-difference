
class Solution
{
    

	public int minDifference(int arr[], int n) 
	{  //calculating sum of array
	 int range=0; 
	    for(int i=0;i<arr.length;i++)
	    {
	        range+=arr[i];
	    }
	    //contructing the dp table
	    boolean[][] t=new boolean[n+1][range+1];
	    
	    for(int i=0;i<=n;i++)
	    {
	        for(int j=0;j<=range;j++)
	        {
	            //initialisation of table
	            if(i==0)
	            {
	                t[i][j]= false;
	            }
	            
	            if(j==0)
	            {
	                t[i][j]=true;
	            }
	            
	           // choice 
	        }
	    }
	        for(int i=1;i<=n;i++)
	    {
	        for(int j=1;j<=range;j++)
	        
	           {
    	                if(arr[i-1]<=j)
    	           {
    	               t[i][j]=t[i-1][j-arr[i-1]] || t[i-1][j];
    	           }
    	           else if(arr[i-1]>j)
    	           {
    	                t[i][j]=t[i-1][j];
    	           }
	          
	           }
	       }
	    
	    
	    ArrayList<Integer> arrList=new ArrayList<>();
	    for(int i=0;i<=range/2;i++)
	    {
	        if(t[n][i]==true)
	        {
	            arrList.add(i);
	        }
	    }
	    int minNum= Integer.MAX_VALUE;
	    for(int i=0;i<arrList.size();i++)
	    {
	        int num=arrList.get(i);
	        minNum=Math.min(minNum,range-2*num);
	    }
	    
	    return minNum;
	} 
}
